package main

import (
	"context"
	"fmt"
	"log"
	"math"
	"math/rand"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/procyon-projects/chrono"
	"gorm.io/gorm"
)

func init() {
	rand.Seed(time.Now().Unix())
	SetupSetting()
	SetupDatabase()
}

func main() {
	gin.SetMode(ServerSetting.RunMode)

	routersInit := InitRouter()
	endPoint := fmt.Sprintf(":%d", ServerSetting.HttpPort)

	server := &http.Server{
		Addr:    endPoint,
		Handler: routersInit,
	}

	eventData, eventDataErr := GetEventData(db)
	if eventDataErr == gorm.ErrRecordNotFound {
		log.Println("NO EVENT WAS FOUND!!!")
	} else if eventDataErr != nil {
		log.Fatal(eventDataErr)
	} else {
		fmt.Println("EventStart: " + fmt.Sprint(eventData.Start))
		fmt.Println("EventEnd: " + fmt.Sprint(eventData.End))

		taskScheduler := chrono.NewDefaultTaskScheduler()
		if eventData.Start.After(time.Now()) {
			_, schedulerErr := taskScheduler.Schedule(func(ctx context.Context) {
				fmt.Println("Starting Event")
				updatePricesTask(taskScheduler, eventData)
			}, chrono.WithTime(eventData.Start))
			if schedulerErr == nil {
				log.Print("Start Event Task has been scheduled successfully.")
			} else {
				log.Fatal(schedulerErr)
			}
		} else {
			updatePricesTask(taskScheduler, eventData)
		}
	}

	log.Printf("Start http server on Port %s", endPoint)

	err := server.ListenAndServe()
	log.Fatal(err)
}

func updatePricesTask(taskScheduler chrono.TaskScheduler, eventData EventData) {
	frequency := 10 * time.Second
	priceTask, priceTaskErr := taskScheduler.ScheduleAtFixedRate(func(ctx context.Context) {
		updatePrices(frequency, eventData)
	}, frequency)
	if priceTaskErr == nil {
		log.Print("Price Udpate Task started successfuly.")
	} else {
		log.Fatal(priceTaskErr)
	}
	_, schedulerErr := taskScheduler.Schedule(func(ctx context.Context) {
		log.Println("Updating Prices Task Finished")
		priceTask.Cancel()
	}, chrono.WithTime(eventData.End))
	if schedulerErr == nil {
		log.Println("Price Task Cancel Task started successfuly.")
	} else {
		log.Fatal(schedulerErr)
	}
}

func updatePrices(frequency time.Duration, eventData EventData) {
	log.Println("Updating Prices")
	products, _ := GetProducts(db, eventData.Start, eventData.End)

	fmt.Println("Event End: " + fmt.Sprint(eventData.End))
	now := time.Now()
	eventDuration := eventData.End.Sub(eventData.Start)
	elapsedEventTime := time.Now().Sub(eventData.Start)
	elapsedFactor := float32(elapsedEventTime.Milliseconds()) / float32(eventDuration.Milliseconds())
	for _, product := range products {
		lastPrice := product.StartPrice
		if len(product.PriceData) > 0 {
			lastPrice = product.PriceData[len(product.PriceData)-1].Price
		}
		desiredSells := uint(float32(product.Stock) * elapsedFactor)
		fmt.Println("Desired Sells: " + fmt.Sprint(desiredSells))
		sells := uint(len(product.SellData))
		priceDelta := (float64(sells) - float64(desiredSells)) / 10
		fmt.Println("Price Delta: " + fmt.Sprint(priceDelta))
		fmt.Println("Last Price: " + fmt.Sprint(lastPrice))

		SetNewPrice(db, product.ID, float32(math.Max(60, float64(lastPrice)+priceDelta)), now)
	}
}

func getProductFromList(products []Product, id uint) *Product {
	for _, s := range products {
		if s.ID == id {
			return &s
		}
	}
	return nil
}

func getFirstSell(products []Product) *time.Time {
	var firstSell *time.Time
	for _, s := range products {
		if len(s.SellData) == 0 {
			continue
		}
		productFirstSell := s.SellData[0].CreatedAt
		if firstSell == nil || productFirstSell.Before(*firstSell) {
			firstSell = &productFirstSell
		}
	}
	return firstSell
}
